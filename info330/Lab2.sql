-- Write an SQL query to find the products that have a price greater than $20.
-- Return ProductID and ProductName. [37 rows]
SELECT ProductID, ProductName
FROM Products
WHERE UnitPrice > 20;


-- Write an SQL query to find the suppliers who provide the products that have a price greater than $20.
-- Return SupplierID and CompanyName. This question is built upon the previous one [21 rows]
SELECT s.SupplierID, s.CompanyName
FROM Suppliers s
WHERE s.SupplierID
   IN(SELECT p.SupplierID
   FROM Products p
   WHERE p.UnitPrice > 20
);


-- Write an SQL query to find the products that are out of stock.
-- Return ProductID and ProductName. [5 rows]
SELECT ProductID, ProductName
FROM Products
WHERE UnitsInStock = 0;


-- Write an SQL query to find the companies who have ordered any of the out-of-stock products.
-- Return CompanyName and CustomerID. This question is built upon the previous one. [66 rows]
SELECT c.CompanyName, c.CustomerID
FROM Customers c
WHERE c.CustomerID
   IN(SELECT o.CustomerID
   FROM Orders o
   WHERE o.OrderID
       IN(SELECT d.OrderID
       FROM [Order Details] d
       WHERE d.ProductID
           IN(SELECT p.ProductID
           FROM Products p
           WHERE UnitsInStock = 0
       )
   )
);


-- Write an SQL query to find the total value of each order.
-- Return OrderID and total value. [830 rows]
SELECT OrderID, sum(UnitPrice * Quantity * (1 - Discount)) AS TotalValue
FROM [Order Details]
GROUP BY OrderID;


-- Write an SQL query to find the customers who have placed orders with a total value greater than $100,000.
-- Return CustomerID, CompanyName, and TotalSpending. This question is built upon the previous one. [3 rows]
SELECT c.CustomerID, c.CompanyName, sum(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSpending
FROM Customers c
   JOIN Orders o ON c.CustomerID = o.CustomerID
   JOIN [Order Details] d ON o.OrderID = d.OrderID
GROUP BY c.CustomerID, c.CompanyName
HAVING sum(d.UnitPrice * d.Quantity * (1 - d.Discount)) > 100000;


-- Write an SQL query to find the employees who have sold products to customers located in Berlin.
-- Return EmployeeID, Fname, and Lname. [4 rows]
SELECT DISTINCT e.EmployeeID, e.FirstName, e.LastName
FROM Employees e
   JOIN Orders o ON e.EmployeeID = o.EmployeeID
   JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.City = 'Berlin';


-- Write an SQL query to find the total revenue generated by the products sold to customers located in Berlin by those employees.
-- Return ProductID, ProductName, and TotalRev. This question is built upon the previous one. [11 rows]
SELECT p.ProductID, p.ProductName, sum(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalRev
FROM Products p
   JOIN [Order Details] d ON p.ProductID = d.ProductID
   JOIN Orders o ON d.OrderID = o.OrderID
   JOIN Employees e ON o.EmployeeID = e.EmployeeID
WHERE e.EmployeeID
   IN(SELECT e.EmployeeID
   FROM Employees e
   JOIN Orders o ON e.EmployeeID = o.EmployeeID
   JOIN Customers c ON o.CustomerID = c.CustomerID
   WHERE c.City = 'Berlin')
AND o.CustomerID
    IN(SELECT c.CustomerID
    FROM Customers c
    WHERE c.City = 'Berlin')
GROUP BY p.ProductID, p.ProductName;